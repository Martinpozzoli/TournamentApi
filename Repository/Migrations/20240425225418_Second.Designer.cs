// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Data;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(TournamentsDbContext))]
    [Migration("20240425225418_Second")]
    partial class Second
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClubTournament", b =>
                {
                    b.Property<int>("ClubsId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentsId")
                        .HasColumnType("int");

                    b.HasKey("ClubsId", "TournamentsId");

                    b.HasIndex("TournamentsId");

                    b.ToTable("ClubTournament");
                });

            modelBuilder.Entity("Model.Entities.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clubs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Manchester City",
                            ShortName = "MCI"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Manchester United",
                            ShortName = "MUN"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Chelsea",
                            ShortName = "CHE"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Liverpool",
                            ShortName = "LIV"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Arsenal",
                            ShortName = "ARS"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Tottenham Hotspur",
                            ShortName = "TOT"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Leicester City",
                            ShortName = "LEI"
                        },
                        new
                        {
                            Id = 8,
                            Name = "West Ham United",
                            ShortName = "WHU"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Everton",
                            ShortName = "EVE"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Aston Villa",
                            ShortName = "AVL"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Leeds United",
                            ShortName = "LEE"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Wolverhampton Wanderers",
                            ShortName = "WOL"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Crystal Palace",
                            ShortName = "CRY"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Southampton",
                            ShortName = "SOU"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Newcastle United",
                            ShortName = "NEW"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Brighton & Hove Albion",
                            ShortName = "BHA"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Burnley",
                            ShortName = "BUR"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Fulham",
                            ShortName = "FUL"
                        },
                        new
                        {
                            Id = 19,
                            Name = "West Bromwich Albion",
                            ShortName = "WBA"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Sheffield United",
                            ShortName = "SHU"
                        });
                });

            modelBuilder.Entity("Model.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocalTeamId")
                        .HasColumnType("int");

                    b.Property<int>("ScoreTeamA")
                        .HasColumnType("int");

                    b.Property<int>("ScoreTeamB")
                        .HasColumnType("int");

                    b.Property<int>("StadiumId")
                        .HasColumnType("int");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("int");

                    b.Property<int>("VisitorTeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocalTeamId");

                    b.HasIndex("StadiumId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("VisitorTeamId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Model.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Model.Entities.Stadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocalClubId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocalClubId");

                    b.ToTable("Stadiums");
                });

            modelBuilder.Entity("Model.Entities.Standing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<int>("GoalsAgainst")
                        .HasColumnType("int");

                    b.Property<int>("GoalsFor")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Standings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClubId = 1,
                            GoalsAgainst = 1,
                            GoalsFor = 2,
                            Position = 1,
                            TournamentId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClubId = 2,
                            GoalsAgainst = 2,
                            GoalsFor = 1,
                            Position = 10,
                            TournamentId = 1
                        },
                        new
                        {
                            Id = 3,
                            ClubId = 3,
                            GoalsAgainst = 0,
                            GoalsFor = 0,
                            Position = 2,
                            TournamentId = 1
                        },
                        new
                        {
                            Id = 4,
                            ClubId = 4,
                            GoalsAgainst = 0,
                            GoalsFor = 0,
                            Position = 3,
                            TournamentId = 1
                        },
                        new
                        {
                            Id = 5,
                            ClubId = 5,
                            GoalsAgainst = 0,
                            GoalsFor = 0,
                            Position = 4,
                            TournamentId = 1
                        },
                        new
                        {
                            Id = 6,
                            ClubId = 6,
                            GoalsAgainst = 0,
                            GoalsFor = 0,
                            Position = 5,
                            TournamentId = 1
                        },
                        new
                        {
                            Id = 7,
                            ClubId = 7,
                            GoalsAgainst = 0,
                            GoalsFor = 0,
                            Position = 6,
                            TournamentId = 1
                        },
                        new
                        {
                            Id = 8,
                            ClubId = 8,
                            GoalsAgainst = 0,
                            GoalsFor = 0,
                            Position = 7,
                            TournamentId = 1
                        },
                        new
                        {
                            Id = 9,
                            ClubId = 9,
                            GoalsAgainst = 0,
                            GoalsFor = 0,
                            Position = 8,
                            TournamentId = 1
                        },
                        new
                        {
                            Id = 10,
                            ClubId = 10,
                            GoalsAgainst = 0,
                            GoalsFor = 0,
                            Position = 9,
                            TournamentId = 1
                        },
                        new
                        {
                            Id = 11,
                            ClubId = 1,
                            GoalsAgainst = 1,
                            GoalsFor = 1,
                            Position = 1,
                            TournamentId = 2
                        },
                        new
                        {
                            Id = 12,
                            ClubId = 15,
                            GoalsAgainst = 0,
                            GoalsFor = 0,
                            Position = 3,
                            TournamentId = 2
                        },
                        new
                        {
                            Id = 13,
                            ClubId = 16,
                            GoalsAgainst = 1,
                            GoalsFor = 1,
                            Position = 2,
                            TournamentId = 2
                        });
                });

            modelBuilder.Entity("Model.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "English Premier League",
                            Name = "Premier League"
                        },
                        new
                        {
                            Id = 2,
                            Description = "English Summer League",
                            Name = "Mini League"
                        });
                });

            modelBuilder.Entity("Model.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ClubTournament", b =>
                {
                    b.HasOne("Model.Entities.Club", null)
                        .WithMany()
                        .HasForeignKey("ClubsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Match", b =>
                {
                    b.HasOne("Model.Entities.Club", "LocalTeam")
                        .WithMany("LocalMatches")
                        .HasForeignKey("LocalTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Entities.Stadium", "Stadium")
                        .WithMany()
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Tournament", null)
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId");

                    b.HasOne("Model.Entities.Club", "VisitorTeam")
                        .WithMany("VisitorMatches")
                        .HasForeignKey("VisitorTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LocalTeam");

                    b.Navigation("Stadium");

                    b.Navigation("VisitorTeam");
                });

            modelBuilder.Entity("Model.Entities.Player", b =>
                {
                    b.HasOne("Model.Entities.Club", "Club")
                        .WithMany("Players")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("Model.Entities.Stadium", b =>
                {
                    b.HasOne("Model.Entities.Club", "LocalClub")
                        .WithMany()
                        .HasForeignKey("LocalClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocalClub");
                });

            modelBuilder.Entity("Model.Entities.Standing", b =>
                {
                    b.HasOne("Model.Entities.Club", "Club")
                        .WithMany("Standings")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Entities.Tournament", "Tournament")
                        .WithMany("Standings")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Model.Entities.Club", b =>
                {
                    b.Navigation("LocalMatches");

                    b.Navigation("Players");

                    b.Navigation("Standings");

                    b.Navigation("VisitorMatches");
                });

            modelBuilder.Entity("Model.Entities.Tournament", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Standings");
                });
#pragma warning restore 612, 618
        }
    }
}
